import { Suspense } from "react";
import Navbar from "../components/Navbar/Navbar";
import {
	getData,
	seasonalFrtAndVgt,
	seasonalData,
	getSpoonData
} from "./ServerComponent";
import GeneralProvider from "./generalContext/GeneralContext";
import { NavigationEvents } from "./utils/navigation/NavigationEvents";
import store from "../lib/store";
// import { makeStore } from "../lib/store";
import StoreProvider from "./reduxContext/StoreProvider";
// "use-client";

import RequestComponent from "@/components/RequestComponent/RequestComponent";

import testList from "../spoonTempData/tempList.json";
import { jsonObj } from "@/spoonTempData/list";

import "./globals.css";
import { Inter } from "next/font/google";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
	title: "Green Like Nature",
	description: "Generated by create next app"
};

export const viewport = {
	themeColor: "#232323"
};

// <----
// {
// 	/* <meta name="theme-color" content="#123456"></meta> */
// }
// Qui oppure capire come inserire component Head in altre page

export default async function RootLayout({ children }) {
	// const store = makeStore();
	const seasonalList = await seasonalData();
	const list = Object.keys(seasonalList)
		.map((elem) => elem.toLowerCase())
		.join(",");
	// console.log(seasonalList);

	// Riattivare qui, aggiornare con tutti i parametri...
	// la chiamata, no list seasonal, solo per filter --->
	const completeList = await getSpoonData("", "", "", 100, 0);
	// <--- Riattivare qui

	// console.log(completeList);
	// Aggiungere qui nuovi campi intolleranze
	const cleanList = completeList["results"].map((recipe) => {
		// const {
		// 	id,
		// 	title,
		// 	aggregateLikes,
		// 	analyzedInstructions,
		// diaryFree,
		// 	extendedIngredients,
		// glutenFree,
		// 	image,
		// 	readyInMinutes,
		// 	servings,
		// 	summary,
		// 	vegan,
		// 	vegetarian
		// } = recipe;
		return {
			...recipe
			// id: id,
			// title: title,
			// aggregateLikes: aggregateLikes,
			// analyzedInstructions: analyzedInstructions,
			// extendedIngredients: extendedIngredients,
			// image: image,
			// readyInMinutes: readyInMinutes,
			// servings: servings,
			// summary: summary,
			// vegan: vegan,
			// vegetarian: vegetarian
		};
	});

	return (
		<html lang="en">
			<body className={inter.className}>
				<StoreProvider recipes={cleanList} list={seasonalList}>
					<GeneralProvider>
						{/* <RequestComponent getSpoonData={getSpoonData}> */}
						{children}
						<Suspense fallback={null}>
							<NavigationEvents getSpoonData={getSpoonData} />
						</Suspense>
						{/* </RequestComponent> */}
					</GeneralProvider>
					<Navbar />
				</StoreProvider>
			</body>
		</html>
	);
}
