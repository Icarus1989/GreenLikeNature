import { Suspense } from "react";
import Navbar from "../../components/Navbar/Navbar";
import {
	getData,
	seasonalFrtAndVgt,
	seasonalData,
	getSpoonData
} from "../ServerComponent";
import GeneralProvider from "../generalContext/GeneralContext";
import { NavigationEvents } from "../utils/navigation/NavigationEvents";
import store from "../../lib/store";
// import { makeStore } from "../lib/store";
import StoreProvider from "../reduxContext/StoreProvider";
// "use-client";

import RequestComponent from "@/components/RequestComponent/RequestComponent";

import testList from "@/spoonTempData/tempList.json";
import { jsonObj } from "@/spoonTempData/list";

import { calcSeasonalListIDs } from "../utils/seasonal/seasonalUtility";

import { intolerancesObj } from "../utils/intolerances/intolerancesObj";

import "./globals.css";
import { Inter } from "next/font/google";

import { i18nConfig } from "@/i18nConfig";
import { dir } from "i18next";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
	title: "Green Like Nature",
	description: "Generated by create next app"
};

export const viewport = {
	themeColor: "#232323"
};

// <----
// {
// 	/* <meta name="theme-color" content="#123456"></meta> */
// }
// Qui oppure capire come inserire component Head in altre page

export function generateStaticParams() {
	return i18nConfig.locales.map((locale) => ({ locale }));
}

export default async function RootLayout({ children, params: { locale } }) {
	// const store = makeStore();
	const seasonalList = await seasonalData();
	const list = Object.keys(seasonalList)
		.map((elem) => elem.toLowerCase())
		.join(",");
	console.log(seasonalList);

	// Riattivare qui --->
	// const completeList = await getSpoonData("", "", "", 100, 0);
	// <--- Riattivare qui

	const completeList = { results: testList };

	// console.log(completeList);
	// Aggiungere qui nuovi campi intolleranze
	const cleanList = completeList["results"].map((recipe) => {
		return { ...recipe };
	});

	// test

	// console.log(cleanList);

	const seasonalListIDs = calcSeasonalListIDs(seasonalList, cleanList);

	console.log(seasonalListIDs);

	const seasonalRecipes = seasonalListIDs.map((id) => {
		// console.log(id);
		return cleanList.find((recipe) => {
			if (Number(recipe.id) === Number(id)) {
				return true;
			} else {
				return false;
			}
		});
	});
	// console.log("seasonal recipes");
	// console.log(
	// 	cleanList.find((recipe) => Number(seasonalListIDs[0]) === recipe.id)
	// );
	// console.log(seasonalRecipes);

	// test

	// const cleanList = completeList["results"].map((recipe) => {
	// 	const {
	// 		id,
	// 		title,
	// 		aggregateLikes,
	// 		analyzedInstructions,
	// 		diaryFree,
	// 		extendedIngredients,
	// 		glutenFree,
	// 		image,
	// 		readyInMinutes,
	// 		servings,
	// 		summary,
	// 		vegan,
	// 		vegetarian
	// 	} = recipe;

	// 	const ingrsNames = extendedIngredients.map((ingr) => ingr.name);

	// 	function detectIntolerance(name) {
	// 		const intolList = intolerancesObj[name];
	// 		const detected = [];
	// 		for (let name of ingrsNames) {
	// 			for (let intol of intolList) {
	// 				if (String(name).includes(intol)) {
	// 					detected.push(intol);
	// 				}
	// 			}
	// 		}
	// 		if (detected.length > 0) {
	// 			return false;
	// 		} else {
	// 			return true;
	// 		}
	// 	}

	// 	const eggFree = detectIntolerance("egg");
	// 	const grainFree = detectIntolerance("grain");
	// 	const peanutFree = detectIntolerance("peanut");
	// 	const seafoodFree = detectIntolerance("seafood");
	// 	const sesameFree = detectIntolerance("sesame");
	// 	const shellfishFree = detectIntolerance("shellfish");
	// 	const soyFree = detectIntolerance("soy");
	// 	const sulfiteFree = detectIntolerance("sulfite");
	// 	const treeNutFree = detectIntolerance("treeNut");
	// 	const wheatFree = detectIntolerance("wheat");

	// 	return {
	// 		...recipe,
	// 		id: id,
	// 		title: title,
	// 		aggregateLikes: aggregateLikes,
	// 		analyzedInstructions: analyzedInstructions,
	// 		diaryFree: diaryFree,
	// 		extendedIngredients: extendedIngredients,
	// 		glutenFree: glutenFree,
	// 		eggFree: eggFree,
	// 		grainFree: grainFree,
	// 		peanutFree: peanutFree,
	// 		seafoodFree: seafoodFree,
	// 		sesameFree: sesameFree,
	// 		shellfishFree: shellfishFree,
	// 		soyFree: soyFree,
	// 		sulfiteFree: sulfiteFree,
	// 		treeNutFree: treeNutFree,
	// 		wheatFree: wheatFree,
	// 		image: image,
	// 		readyInMinutes: readyInMinutes,
	// 		servings: servings,
	// 		summary: summary,
	// 		vegan: vegan,
	// 		vegetarian: vegetarian
	// 	};
	// });

	return (
		<html lang={locale} dir={dir(locale)}>
			<body className={inter.className}>
				<StoreProvider
					recipes={cleanList}
					list={seasonalList}
					seasonal={seasonalRecipes}
				>
					<GeneralProvider>
						{/* <RequestComponent getSpoonData={getSpoonData}> */}
						{children}
						<Suspense fallback={null}>
							<NavigationEvents getSpoonData={getSpoonData} />
						</Suspense>
						{/* </RequestComponent> */}
					</GeneralProvider>
					<Navbar />
				</StoreProvider>
			</body>
		</html>
	);
}
